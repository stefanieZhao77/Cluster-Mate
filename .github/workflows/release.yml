name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version Type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch   # v1.0.0 -> v1.0.1
        - minor   # v1.0.0 -> v1.1.0
        - major   # v1.0.0 -> v2.0.0

permissions:
  contents: write
  discussions: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Get latest version
      id: get_version
      shell: pwsh
      run: |
        # Get the latest tag or default to v0.0.0
        $latest_tag = $(git describe --tags --abbrev=0 2>$null)
        if (-not $latest_tag) { $latest_tag = 'v0.0.0' }
        
        # Parse version numbers
        $version = $latest_tag -replace 'v', ''
        $major, $minor, $patch = $version.Split('.')
        
        # Increment version based on input or tag
        if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
          switch ('${{ inputs.version_type }}') {
            'major' { $major = [int]$major + 1; $minor = 0; $patch = 0 }
            'minor' { $minor = [int]$minor + 1; $patch = 0 }
            'patch' { $patch = [int]$patch + 1 }
          }
          $new_version = "v${major}.${minor}.${patch}"
        } else {
          $new_version = '${{ github.ref_name }}'
        }
        
        echo "NEW_VERSION=$new_version" >> $env:GITHUB_ENV
        echo "VERSION_NUMBER=$($new_version -replace 'v','')" >> $env:GITHUB_ENV
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create Version File
      run: |
        $version = '${{ env.VERSION_NUMBER }}'
        $version_nums = $version.Split('.')
        $version_tuple = "$($version_nums[0]),$($version_nums[1]),$($version_nums[2]),0"
        
        $version_info = @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($version_tuple),
            prodvers=($version_tuple),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo([
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'Cluster-Mate'),
                StringStruct(u'FileDescription', u'Clustering Analysis Tool'),
                StringStruct(u'FileVersion', u'${{ env.VERSION_NUMBER }}'),
                StringStruct(u'InternalName', u'cluster_mate'),
                StringStruct(u'LegalCopyright', u'Copyright (c) 2024'),
                StringStruct(u'OriginalFilename', u'cluster_mate.exe'),
                StringStruct(u'ProductName', u'Cluster-Mate'),
                StringStruct(u'ProductVersion', u'${{ env.VERSION_NUMBER }}')])
            ]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@ | Out-File -Encoding utf8 version_info.txt
      shell: pwsh

    - name: Create PyInstaller Spec
      shell: pwsh
      run: |
        $spec_content = @"
        # -*- mode: python ; coding: utf-8 -*-

        a = Analysis(
            ['GUI/main.py'],
            pathex=['.'],
            binaries=[],
            datas=[('GUI', 'GUI')],
            hiddenimports=['PIL', 'PIL._tkinter_finder'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            noarchive=False,
        )
        pyz = PYZ(a.pure)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.datas,
            [],
            name='cluster_mate',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            version='version_info.txt',
            icon='GUI/assets/icon.ico'
        )
        "@
        $spec_content | Out-File -Encoding utf8 cluster_mate.spec
        
    - name: Build with PyInstaller
      shell: pwsh
      run: |
        pyinstaller --clean cluster_mate.spec
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_VERSION }}
        name: Release ${{ env.NEW_VERSION }}
        files: |
          dist/cluster_mate.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 